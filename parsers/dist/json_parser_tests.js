define(['chai', 'json_parsers', 'classes'], function (_chai, _json_parsers, _classes) {
    'use strict';

    var text = _classes.Position.fromText;

    describe('building a JSON parser', function () {
        describe('a parser for JNull\'s', function () {
            it('parses the string \'null\' and returns a JValue.JNull', function () {
                var run = _json_parsers.JNullP.run('null');
                (0, _chai.expect)(run.isSuccess).to.be.true;
                (0, _chai.expect)(run.value[0].isJNull).to.be.true;
                (0, _chai.expect)(_json_parsers.JNullP.run('nulx').isFailure).to.be.true;
            });
        });
        describe('a parser for JBool\'s', function () {
            it('parses the string \'true\' and returns a JValue.JBool(true)', function () {
                var run = _json_parsers.JBoolP.run('true');
                (0, _chai.expect)(run.isSuccess).to.be.true;
                (0, _chai.expect)(run.value[0].isJBool).to.be.true;
                (0, _chai.expect)(run.value[0].value).to.be.true;
            });
            it('parses the string \'false\' and returns a JValue.JBool(false)', function () {
                var run = _json_parsers.JBoolP.run('false');
                (0, _chai.expect)(run.isSuccess).to.be.true;
                (0, _chai.expect)(run.value[0].isJBool).to.be.true;
                (0, _chai.expect)(run.value[0].value).to.be.false;
            });
            it('fails to parse anything else', function () {
                (0, _chai.expect)(_json_parsers.JBoolP.run('trux').isFailure).to.be.true;
            });
        });
        describe('a parser for JSON unescaped chars', function () {
            it('parses an unescaped character and returns a Success', function () {
                (0, _chai.expect)(_json_parsers.jUnescapedCharP.run(text('a')).isSuccess).to.be.true;
                (0, _chai.expect)(_json_parsers.jUnescapedCharP.run(text('A')).isSuccess).to.be.true;
                (0, _chai.expect)(_json_parsers.jUnescapedCharP.run(text('1')).isSuccess).to.be.true;
                (0, _chai.expect)(_json_parsers.jUnescapedCharP.run(text('"')).isFailure).to.be.true;
                (0, _chai.expect)(_json_parsers.jUnescapedCharP.run(text('\\')).isFailure).to.be.true;
            });
        });
        describe('a parser for JSON escaped chars', function () {
            it('parses an escaped character and returns a Success', function () {
                (0, _chai.expect)(_json_parsers.jEscapedCharP.run(text('\b')).isSuccess).to.be.true;
                (0, _chai.expect)(_json_parsers.jEscapedCharP.run(text('\f')).isSuccess).to.be.true;
                //            expect(jEscapedCharP.run(text('\n')).isSuccess).to.be.true;
                (0, _chai.expect)(_json_parsers.jEscapedCharP.run(text('\r')).isSuccess).to.be.true;
                (0, _chai.expect)(_json_parsers.jEscapedCharP.run(text('\t')).isSuccess).to.be.true;
                (0, _chai.expect)(_json_parsers.jEscapedCharP.run(text('a')).isFailure).to.be.true;
            });
        });
        describe('a parser for escaped 4-digits unicode chars', function () {
            it('parses an escaped character and returns a Success', function () {
                var run = _json_parsers.jUnicodeCharP.run(text('\\u1a2e'));
                (0, _chai.expect)(run.isSuccess).to.be.true;
                (0, _chai.expect)(run.value[0]).to.be.eql(6702);
                (0, _chai.expect)(_json_parsers.jUnicodeCharP.run(text('\\u0010')).value[0]).to.be.eql(16);
                (0, _chai.expect)(_json_parsers.jUnicodeCharP.run(text('\\u000F')).value[0]).to.be.eql(15);
            });
        });
        describe('a parser for doublequoted JSON strings', function () {
            it('parses a lot of characters and returns a JValue.JString', function () {
                var run = _json_parsers.jStringP.run(text('\"test string\"')); // works also with unescaped doublequotes
                (0, _chai.expect)(run.isSuccess).to.be.true;
                (0, _chai.expect)(run.value[0].isJString).to.be.true;
                (0, _chai.expect)(run.value[0].value).to.be.eql('test string');
            });
            it('handles unicodes very roughly, and no escaped chars yet...', function () {
                var run = _json_parsers.jStringP.run(text('"test \\u0010 string"'));
                (0, _chai.expect)(run.isSuccess).to.be.true;
                (0, _chai.expect)(run.value[0].isJString).to.be.true;
                (0, _chai.expect)(run.value[0].value).to.be.eql('test 16 string');
            });
        });
        describe('a parser for numbers inside JSON files', function () {
            it('parses simple integers and returns Success\'es', function () {
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('0')).value[0]).to.be.eql('0');
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('0.1')).value[0]).to.be.eql('0.1');
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('-0')).value[0]).to.be.eql('-0');
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('-0.1')).value[0]).to.be.eql('-0.1');
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('0.1234e145')).value[0]).to.be.eql('0.1234e145');
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('-0.1234e-145')).value[0]).to.be.eql('-0.1234e-145');
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('123')).value[0]).to.be.eql('123');
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('123.12')).value[0]).to.be.eql('123.12');
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('-123')).value[0]).to.be.eql('-123');
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('-123.12')).value[0]).to.be.eql('-123.12');
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('123e2')).value[0]).to.be.eql('123e2');
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('-123e2')).value[0]).to.be.eql('-123e2');
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('-123e-2')).value[0]).to.be.eql('-123e-2');
                (0, _chai.expect)(_json_parsers.jNumberP.run(text('-123.234e-2')).value[0]).to.be.eql('-123.234e-2');
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,