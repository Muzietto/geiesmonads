define(['chai', 'json_parsers', 'classes'], function (_chai, _json_parsers, _classes) {
  'use strict';

  var text = _classes.Position.fromText;

  describe('building a JSON parser', function () {
    describe('a parser for JNull\'s', function () {
      it('parses the string \'null\' and returns a JValue.JNull', function () {
        var run = _json_parsers.JNullP.run('null');
        (0, _chai.expect)(run.isSuccess).to.be.true;
        (0, _chai.expect)(run.value[0].isJNull).to.be.true;
        (0, _chai.expect)(_json_parsers.JNullP.run('nulx').isFailure).to.be.true;
      });
    });
    describe('a parser for JBool\'s', function () {
      it('parses the string \'true\' and returns a JValue.JBool(true)', function () {
        var run = _json_parsers.JBoolP.run('true');
        (0, _chai.expect)(run.isSuccess).to.be.true;
        (0, _chai.expect)(run.value[0].isJBool).to.be.true;
        (0, _chai.expect)(run.value[0]).to.be.eql(_classes.JValue.JBool(true));
        (0, _chai.expect)(run.value[0].value).to.be.true;
      });
      it('parses the string \'false\' and returns a JValue.JBool(false)', function () {
        var run = _json_parsers.JBoolP.run('false');
        (0, _chai.expect)(run.isSuccess).to.be.true;
        (0, _chai.expect)(run.value[0].isJBool).to.be.true;
        (0, _chai.expect)(run.value[0].value).to.be.false;
      });
      it('fails to parse anything else', function () {
        (0, _chai.expect)(_json_parsers.JBoolP.run('trux').isFailure).to.be.true;
      });
    });
    describe('a parser for JSON unescaped chars', function () {
      it('parses an unescaped character and returns a Success', function () {
        (0, _chai.expect)(_json_parsers.jUnescapedCharP.run(text('a')).isSuccess).to.be.true;
        (0, _chai.expect)(_json_parsers.jUnescapedCharP.run(text('A')).isSuccess).to.be.true;
        (0, _chai.expect)(_json_parsers.jUnescapedCharP.run(text('1')).isSuccess).to.be.true;
        (0, _chai.expect)(_json_parsers.jUnescapedCharP.run(text('"')).isFailure).to.be.true;
        (0, _chai.expect)(_json_parsers.jUnescapedCharP.run(text('\\')).isFailure).to.be.true;
      });
    });
    describe('a parser for JSON escaped chars', function () {
      it('parses an escaped character and returns a Success', function () {
        (0, _chai.expect)(_json_parsers.jEscapedCharP.run(text('\\b')).isSuccess).to.be.true;
        (0, _chai.expect)(_json_parsers.jEscapedCharP.run(text('\\b')).value[0]).to.be.eql('\b');
        (0, _chai.expect)(_json_parsers.jEscapedCharP.run(text('\\f')).isSuccess).to.be.true;
        (0, _chai.expect)(_json_parsers.jEscapedCharP.run(text('\\f')).value[0]).to.be.eql('\f');
        (0, _chai.expect)(_json_parsers.jEscapedCharP.run(text('\\r')).isSuccess).to.be.true;
        (0, _chai.expect)(_json_parsers.jEscapedCharP.run(text('\\t')).isSuccess).to.be.true;
        (0, _chai.expect)(_json_parsers.jEscapedCharP.run(text('\t')).isFailure).to.be.true;
      });
    });
    describe('a parser for escaped 4-digits unicode chars', function () {
      it('parses an escaped character and returns a Success', function () {
        var run = _json_parsers.jUnicodeCharP.run(text('\\u1a2e'));
        (0, _chai.expect)(run.isSuccess).to.be.true; // \\u263A
        (0, _chai.expect)(run.value[0]).to.be.eql(6702);
        (0, _chai.expect)(_json_parsers.jUnicodeCharP.run(text('\\u0010')).value[0]).to.be.eql(16);
        (0, _chai.expect)(_json_parsers.jUnicodeCharP.run(text('\\u000F')).value[0]).to.be.eql(15);
      });
    });
    describe('a parser for doublequoted JSON strings', function () {
      it('parses a lot of characters and returns a JValue.JString', function () {
        var run = _json_parsers.JStringP.run(text('\"test string\"')); // works also with unescaped doublequotes
        (0, _chai.expect)(run.isSuccess).to.be.true;
        (0, _chai.expect)(run.value[0].isJString).to.be.true;
        (0, _chai.expect)(run.value[0].value).to.be.eql('test string');
      });
      it('handles unicodes very roughly', function () {
        var run = _json_parsers.JStringP.run(text('"test \\u0010 string"'));
        (0, _chai.expect)(run.isSuccess).to.be.true;
        (0, _chai.expect)(run.value[0].isJString).to.be.true;
        (0, _chai.expect)(run.value[0].value).to.be.eql('test 16 string');
      });
      it('handles escaped chars as well', function () {
        var run = _json_parsers.JStringP.run(text('\"test \\n string\"'));
        (0, _chai.expect)(run.isSuccess).to.be.true;
        (0, _chai.expect)(run.value[0].isJString).to.be.true;
        (0, _chai.expect)(run.value[0].value).to.be.eql('test \n string');
      });
      xit('will handle escaped chars better - this should have a smiley inside', function () {
        var run = _json_parsers.JStringP.run(text('"ab\\u263Ade"'));
        (0, _chai.expect)(run.isSuccess).to.be.true;
        (0, _chai.expect)(run.value[0].isJString).to.be.true;
        (0, _chai.expect)(run.value[0].value).to.be.eql('test \n string');
      });
    });
    describe('a parser for numbers inside JSON files', function () {
      it('parses strings and returns Success\'es', function () {
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('0')).value[0]).to.be.eql('0');
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('0.1')).value[0]).to.be.eql('0.1');
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('-0')).value[0]).to.be.eql('-0');
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('-0.1')).value[0]).to.be.eql('-0.1');
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('0.1234e145')).value[0]).to.be.eql('0.1234e145');
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('-0.1234e-145')).value[0]).to.be.eql('-0.1234e-145');
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('123')).value[0]).to.be.eql('123');
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('123.12')).value[0]).to.be.eql('123.12');
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('-123')).value[0]).to.be.eql('-123');
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('-123.12')).value[0]).to.be.eql('-123.12');
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('123e2')).value[0]).to.be.eql('123e2');
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('-123e2')).value[0]).to.be.eql('-123e2');
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('-123e-2')).value[0]).to.be.eql('-123e-2');
        (0, _chai.expect)(_json_parsers.jNumberStringP.run(text('-123.234e-2')).value[0]).to.be.eql('-123.234e-2');
      });
      it('parses strings and returns JNumber\'s', function () {
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('0')).value[0].value).to.be.eql(0);
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('0.1')).value[0].value).to.be.eql(0.1);
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('-0')).value[0].value).to.be.eql(-0);
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('-0.1')).value[0].value).to.be.eql(-0.1);
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('0.1234e145')).value[0].value).to.be.eql(0.1234e145);
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('-0.1234e-145')).value[0].value).to.be.eql(-0.1234e-145);
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('123')).value[0].value).to.be.eql(123);
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('123.12')).value[0].value).to.be.eql(123.12);
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('-123')).value[0].value).to.be.eql(-123);
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('-123.12')).value[0].value).to.be.eql(-123.12);
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('123e2')).value[0].value).to.be.eql(123e2);
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('-123e2')).value[0].value).to.be.eql(-123e2);
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('-123e-2')).value[0].value).to.be.eql(-123e-2);
        (0, _chai.expect)(_json_parsers.JNumberP.run(text('-123.234e-2')).value[0].value).to.be.eql(-123.234e-2);
      });
    });
    describe('a parser for JSON arrays discards square brackets', function () {
      this.timeout(50000000000);
      describe('and distills into JValue.JArray\'s', function () {
        it('nothing if that\'s the case', function () {
          var jarra = '[   ]';
          var run = _json_parsers.JArrayP.run(text(jarra));
          (0, _chai.expect)(run.isSuccess).to.be.true;
          (0, _chai.expect)(run.value[0].isJArray).to.be.true;
          var content = run.value[0].value;
          (0, _chai.expect)(content.length).to.be.eql(0);
        });
        it('numbers', function () {
          var jarra = '[  1   , 2   , 3    ]';
          var run = _json_parsers.JArrayP.run(text(jarra));
          (0, _chai.expect)(run.isSuccess).to.be.true;
          (0, _chai.expect)(run.value[0].isJArray).to.be.true;
          var content = run.value[0].value;
          (0, _chai.expect)(content.length).to.be.eql(3);
          (0, _chai.expect)(content[0].isJNumber).to.be.true;
          (0, _chai.expect)(content[0].value).to.be.eql(1);
          (0, _chai.expect)(content[1].value).to.be.eql(2);
          (0, _chai.expect)(content[2].value).to.be.eql(3);
        });
        it('numbers, nulls, strings and bools', function () {
          var jarra = '[true ,   false , null,      true,123.123   ,"paperino"]';
          var run = _json_parsers.JArrayP.run(text(jarra));
          (0, _chai.expect)(run.isSuccess).to.be.true;
          (0, _chai.expect)(run.value[0].isJArray).to.be.true;
          var content = run.value[0].value;
          (0, _chai.expect)(content.length).to.be.eql(6);
          (0, _chai.expect)(content[0].isJBool).to.be.true;
          (0, _chai.expect)(content[0].value).to.be.true;
          (0, _chai.expect)(content[1].isJBool).to.be.true;
          (0, _chai.expect)(content[1].value).to.be.false;
          (0, _chai.expect)(content[2].isJNull).to.be.true;
          (0, _chai.expect)(content[2].value).to.be.null;
          (0, _chai.expect)(content[4].isJNumber).to.be.true;
          (0, _chai.expect)(content[4].value).to.be.eql(123.123);
          (0, _chai.expect)(content[5].isJString).to.be.true;
          (0, _chai.expect)(content[5].value).to.be.eql('paperino');
        });
        it('arrays and all the rest', function () {
          var jarra = '[[123],    null, [      null,  "minnie"  ,[     ]  ]]';
          var run = _json_parsers.JArrayP.run(text(jarra));
          (0, _chai.expect)(run.isSuccess).to.be.true;
          (0, _chai.expect)(run.value[0].isJArray).to.be.true;

          var content = run.value[0].value;
          (0, _chai.expect)(content.length).to.be.eql(3);

          (0, _chai.expect)(content[0].isJArray).to.be.true;
          (0, _chai.expect)(content[0].value.length).to.be.eql(1);
          (0, _chai.expect)(content[0].value[0].isJNumber).to.be.true;
          (0, _chai.expect)(content[0].value[0].value).to.be.eql(123);

          (0, _chai.expect)(content[1].isJNull).to.be.true;
          (0, _chai.expect)(content[1].value).to.be.null;

          (0, _chai.expect)(content[2].isJArray).to.be.true;
          (0, _chai.expect)(content[2].value.length).to.be.eql(3);
          (0, _chai.expect)(content[2].value[0].isJNull).to.be.true;
          (0, _chai.expect)(content[2].value[1].isJString).to.be.true;
          (0, _chai.expect)(content[2].value[1].value).to.be.eql('minnie');
          (0, _chai.expect)(content[2].value[2].isJArray).to.be.true;
          (0, _chai.expect)(content[2].value[2].value.length).to.be.eql(0);
        });
      });
    });
    describe.only('a parser for JSON object discards curly brackets', function () {
      this.timeout(50000000000);
      describe('and distills into JValue.JObject\'s', function () {
        it('nothing if that\'s the case', function () {
          var jobj = '{   }';
          var run = _json_parsers.JObjectP.run(text(jobj));
          (0, _chai.expect)(run.isSuccess).to.be.true;
          (0, _chai.expect)(run.value[0].isJObject).to.be.true;
          var content = run.value[0].value;
          (0, _chai.expect)(content).to.be.eql({});
        });
        it('objects with numbers as values', function () {
          var jobj = '{ "qwe" : 123 }';
          var run = _json_parsers.JObjectP.run(text(jobj));
          (0, _chai.expect)(run.isSuccess).to.be.true;
          (0, _chai.expect)(run.value[0].isJObject).to.be.true;
          var content = run.value[0].value;
          (0, _chai.expect)(content).to.be.eql({ qwe: 123 });
        });
        xit('arrays with numbers', function () {
          var jobj = '[  1   , 2   , 3    ]';
          var run = _json_parsers.JArrayP.run(text(jobj));
          (0, _chai.expect)(run.isSuccess).to.be.true;
          (0, _chai.expect)(run.value[0].isJArray).to.be.true;
          var content = run.value[0].value;
          (0, _chai.expect)(content.length).to.be.eql(3);
          (0, _chai.expect)(content[0].isJNumber).to.be.true;
          (0, _chai.expect)(content[0].value).to.be.eql(1);
          (0, _chai.expect)(content[1].value).to.be.eql(2);
          (0, _chai.expect)(content[2].value).to.be.eql(3);
        });
        xit('numbers, nulls, strings and bools', function () {
          var jobj = '[true ,   false , null,      true,123.123   ,"paperino"]';
          var run = _json_parsers.JArrayP.run(text(jobj));
          (0, _chai.expect)(run.isSuccess).to.be.true;
          (0, _chai.expect)(run.value[0].isJArray).to.be.true;
          var content = run.value[0].value;
          (0, _chai.expect)(content.length).to.be.eql(6);
          (0, _chai.expect)(content[0].isJBool).to.be.true;
          (0, _chai.expect)(content[0].value).to.be.true;
          (0, _chai.expect)(content[1].isJBool).to.be.true;
          (0, _chai.expect)(content[1].value).to.be.false;
          (0, _chai.expect)(content[2].isJNull).to.be.true;
          (0, _chai.expect)(content[2].value).to.be.null;
          (0, _chai.expect)(content[4].isJNumber).to.be.true;
          (0, _chai.expect)(content[4].value).to.be.eql(123.123);
          (0, _chai.expect)(content[5].isJString).to.be.true;
          (0, _chai.expect)(content[5].value).to.be.eql('paperino');
        });
        it('JSON arrays and all the rest', function () {
          var jobj = '[[123],    null, [      null,  "minnie"  ,[     ]  ]]';
          var run = _json_parsers.JArrayP.run(text(jobj));
          (0, _chai.expect)(run.isSuccess).to.be.true;
          (0, _chai.expect)(run.value[0].isJArray).to.be.true;

          var content = run.value[0].value;
          (0, _chai.expect)(content.length).to.be.eql(3);

          (0, _chai.expect)(content[0].isJArray).to.be.true;
          (0, _chai.expect)(content[0].value.length).to.be.eql(1);
          (0, _chai.expect)(content[0].value[0].isJNumber).to.be.true;
          (0, _chai.expect)(content[0].value[0].value).to.be.eql(123);

          (0, _chai.expect)(content[1].isJNull).to.be.true;
          (0, _chai.expect)(content[1].value).to.be.null;

          (0, _chai.expect)(content[2].isJArray).to.be.true;
          (0, _chai.expect)(content[2].value.length).to.be.eql(3);
          (0, _chai.expect)(content[2].value[0].isJNull).to.be.true;
          (0, _chai.expect)(content[2].value[1].isJString).to.be.true;
          (0, _chai.expect)(content[2].value[1].value).to.be.eql('minnie');
          (0, _chai.expect)(content[2].value[2].isJArray).to.be.true;
          (0, _chai.expect)(content[2].value[2].value.length).to.be.eql(0);
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,