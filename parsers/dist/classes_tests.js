define(['chai', 'util', 'classes'], function (_chai, _util, _classes) {
    'use strict';

    describe('among helper classes', function () {

        describe('somes', function () {
            it('include a value and allow to retrieve it', function () {
                var aSome = (0, _classes.some)(12);
                (0, _chai.expect)(aSome.val()).to.be.eql(12);
                (0, _chai.expect)((0, _util.isSome)(aSome)).to.be.true;
                (0, _chai.expect)(aSome.toString()).to.be.eql('some(12)');
            });
        });

        describe('nones', function () {
            it('are just a signpost', function () {
                var aNone = (0, _classes.none)();
                (0, _chai.expect)(aNone.val()).to.be.null;
                (0, _chai.expect)((0, _util.isNone)(aNone)).to.be.true;
                (0, _chai.expect)(aNone.toString()).to.be.eql('none()');
            });
        });

        describe('pairs', function () {
            it('include 2 values and allow to retrieve them', function () {
                var apair = (0, _classes.pair)(true, 12);
                (0, _chai.expect)(apair[0]).to.be.eql(true);
                (0, _chai.expect)(apair[1]).to.be.eql(12);
                (0, _chai.expect)(apair.type).to.be.eql('pair');
                (0, _chai.expect)((0, _util.isPair)(apair)).to.be.true;
            });
        });

        describe('Pair\'s', function () {
            it('include 2 values and allow to retrieve them', function () {
                var apair = (0, _classes.Pair)(true, 12);
                (0, _chai.expect)(apair[0]).to.be.eql(true);
                (0, _chai.expect)(apair[1]).to.be.eql(12);
                (0, _chai.expect)(apair.type).to.be.eql('pair');
                (0, _chai.expect)(apair.isPair).to.be.true;
                (0, _chai.expect)(apair.toString()).to.be.eql('[true,12]');
            });
        });

        describe('success and failure', function () {
            beforeEach(function () {});
            it('may represent successes', function () {
                var succ = (0, _classes.success)(true, 12);
                (0, _chai.expect)(succ[0]).to.be.true;
                (0, _chai.expect)(succ[1]).to.be.eql(12);
                (0, _chai.expect)((0, _util.isSuccess)(succ)).to.be.true;
                (0, _chai.expect)((0, _util.isPair)(succ)).to.be.true;
            });
            it('may represent failures', function () {
                var fail = (0, _classes.failure)('a', 12);
                (0, _chai.expect)(fail[0]).to.be.eql('a');
                (0, _chai.expect)(fail[1]).to.be.eql(12);
                (0, _chai.expect)((0, _util.isSuccess)(fail)).to.be.false;
                (0, _chai.expect)((0, _util.isFailure)(fail)).to.be.true;
                (0, _chai.expect)((0, _util.isPair)(fail)).to.be.true;
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2pzLXNwZWMvY2xhc3Nlc190ZXN0cy5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiYVNvbWUiLCJ2YWwiLCJ0byIsImJlIiwiZXFsIiwidHJ1ZSIsInRvU3RyaW5nIiwiYU5vbmUiLCJudWxsIiwiYXBhaXIiLCJ0eXBlIiwiaXNQYWlyIiwiYmVmb3JlRWFjaCIsInN1Y2MiLCJmYWlsIiwiZmFsc2UiXSwibWFwcGluZ3MiOiI7OztBQWlCQUEsYUFBUyxzQkFBVCxFQUFpQyxZQUFNOztBQUVuQ0EsaUJBQVMsT0FBVCxFQUFrQixZQUFNO0FBQ3BCQyxlQUFHLDBDQUFILEVBQStDLFlBQU07QUFDakQsb0JBQU1DLFFBQVEsbUJBQUssRUFBTCxDQUFkO0FBQ0Esa0NBQU9BLE1BQU1DLEdBQU4sRUFBUCxFQUFvQkMsRUFBcEIsQ0FBdUJDLEVBQXZCLENBQTBCQyxHQUExQixDQUE4QixFQUE5QjtBQUNBLGtDQUFPLGtCQUFPSixLQUFQLENBQVAsRUFBc0JFLEVBQXRCLENBQXlCQyxFQUF6QixDQUE0QkUsSUFBNUI7QUFDQSxrQ0FBT0wsTUFBTU0sUUFBTixFQUFQLEVBQXlCSixFQUF6QixDQUE0QkMsRUFBNUIsQ0FBK0JDLEdBQS9CLENBQW1DLFVBQW5DO0FBQ0gsYUFMRDtBQU1ILFNBUEQ7O0FBU0FOLGlCQUFTLE9BQVQsRUFBa0IsWUFBTTtBQUNwQkMsZUFBRyxxQkFBSCxFQUEwQixZQUFNO0FBQzVCLG9CQUFNUSxRQUFRLG9CQUFkO0FBQ0Esa0NBQU9BLE1BQU1OLEdBQU4sRUFBUCxFQUFvQkMsRUFBcEIsQ0FBdUJDLEVBQXZCLENBQTBCSyxJQUExQjtBQUNBLGtDQUFPLGtCQUFPRCxLQUFQLENBQVAsRUFBc0JMLEVBQXRCLENBQXlCQyxFQUF6QixDQUE0QkUsSUFBNUI7QUFDQSxrQ0FBT0UsTUFBTUQsUUFBTixFQUFQLEVBQXlCSixFQUF6QixDQUE0QkMsRUFBNUIsQ0FBK0JDLEdBQS9CLENBQW1DLFFBQW5DO0FBQ0gsYUFMRDtBQU1ILFNBUEQ7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OiJjbGFzc2VzX3Rlc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtleHBlY3R9IGZyb20gJ2NoYWknO1xuaW1wb3J0IHtcbiAgICBpc1BhaXIsXG4gICAgaXNTdWNjZXNzLFxuICAgIGlzRmFpbHVyZSxcbiAgICBpc1NvbWUsXG4gICAgaXNOb25lLFxufSBmcm9tICd1dGlsJztcbmltcG9ydCB7XG4gICAgcGFpcixcbiAgICBzdWNjZXNzLFxuICAgIGZhaWx1cmUsXG4gICAgc29tZSxcbiAgICBub25lLFxuICAgIFBhaXIsXG59IGZyb20gJ2NsYXNzZXMnO1xuXG5kZXNjcmliZSgnYW1vbmcgaGVscGVyIGNsYXNzZXMnLCAoKSA9PiB7XG5cbiAgICBkZXNjcmliZSgnc29tZXMnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdpbmNsdWRlIGEgdmFsdWUgYW5kIGFsbG93IHRvIHJldHJpZXZlIGl0JywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYVNvbWUgPSBzb21lKDEyKTtcbiAgICAgICAgICAgIGV4cGVjdChhU29tZS52YWwoKSkudG8uYmUuZXFsKDEyKTtcbiAgICAgICAgICAgIGV4cGVjdChpc1NvbWUoYVNvbWUpKS50by5iZS50cnVlO1xuICAgICAgICAgICAgZXhwZWN0KGFTb21lLnRvU3RyaW5nKCkpLnRvLmJlLmVxbCgnc29tZSgxMiknKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnbm9uZXMnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdhcmUganVzdCBhIHNpZ25wb3N0JywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYU5vbmUgPSBub25lKCk7XG4gICAgICAgICAgICBleHBlY3QoYU5vbmUudmFsKCkpLnRvLmJlLm51bGw7XG4gICAgICAgICAgICBleHBlY3QoaXNOb25lKGFOb25lKSkudG8uYmUudHJ1ZTtcbiAgICAgICAgICAgIGV4cGVjdChhTm9uZS50b1N0cmluZygpKS50by5iZS5lcWwoJ25vbmUoKScpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdwYWlycycsICgpID0+IHtcbiAgICAgICAgaXQoJ2luY2x1ZGUgMiB2YWx1ZXMgYW5kIGFsbG93IHRvIHJldHJpZXZlIHRoZW0nLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhcGFpciA9IHBhaXIodHJ1ZSwgMTIpO1xuICAgICAgICAgICAgZXhwZWN0KGFwYWlyWzBdKS50by5iZS5lcWwodHJ1ZSk7XG4gICAgICAgICAgICBleHBlY3QoYXBhaXJbMV0pLnRvLmJlLmVxbCgxMik7XG4gICAgICAgICAgICBleHBlY3QoYXBhaXIudHlwZSkudG8uYmUuZXFsKCdwYWlyJyk7XG4gICAgICAgICAgICBleHBlY3QoaXNQYWlyKGFwYWlyKSkudG8uYmUudHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnUGFpclxcJ3MnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdpbmNsdWRlIDIgdmFsdWVzIGFuZCBhbGxvdyB0byByZXRyaWV2ZSB0aGVtJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXBhaXIgPSBQYWlyKHRydWUsIDEyKTtcbiAgICAgICAgICAgIGV4cGVjdChhcGFpclswXSkudG8uYmUuZXFsKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KGFwYWlyWzFdKS50by5iZS5lcWwoMTIpO1xuICAgICAgICAgICAgZXhwZWN0KGFwYWlyLnR5cGUpLnRvLmJlLmVxbCgncGFpcicpO1xuICAgICAgICAgICAgZXhwZWN0KGFwYWlyLmlzUGFpcikudG8uYmUudHJ1ZTtcbiAgICAgICAgICAgIGV4cGVjdChhcGFpci50b1N0cmluZygpKS50by5iZS5lcWwoJ1t0cnVlLDEyXScpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdzdWNjZXNzIGFuZCBmYWlsdXJlJywgKCkgPT4ge1xuICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdtYXkgcmVwcmVzZW50IHN1Y2Nlc3NlcycsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN1Y2MgPSBzdWNjZXNzKHRydWUsIDEyKTtcbiAgICAgICAgICAgIGV4cGVjdChzdWNjWzBdKS50by5iZS50cnVlO1xuICAgICAgICAgICAgZXhwZWN0KHN1Y2NbMV0pLnRvLmJlLmVxbCgxMik7XG4gICAgICAgICAgICBleHBlY3QoaXNTdWNjZXNzKHN1Y2MpKS50by5iZS50cnVlO1xuICAgICAgICAgICAgZXhwZWN0KGlzUGFpcihzdWNjKSkudG8uYmUudHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdtYXkgcmVwcmVzZW50IGZhaWx1cmVzJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmFpbCA9IGZhaWx1cmUoJ2EnLCAxMik7XG4gICAgICAgICAgICBleHBlY3QoZmFpbFswXSkudG8uYmUuZXFsKCdhJyk7XG4gICAgICAgICAgICBleHBlY3QoZmFpbFsxXSkudG8uYmUuZXFsKDEyKTtcbiAgICAgICAgICAgIGV4cGVjdChpc1N1Y2Nlc3MoZmFpbCkpLnRvLmJlLmZhbHNlO1xuICAgICAgICAgICAgZXhwZWN0KGlzRmFpbHVyZShmYWlsKSkudG8uYmUudHJ1ZTtcbiAgICAgICAgICAgIGV4cGVjdChpc1BhaXIoZmFpbCkpLnRvLmJlLnRydWU7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG59KTtcbiJdfQ==